// <auto-generated />
using System;
using IGamingTest.Core.Entities.Common;
using IGamingTest.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IGamingTest.Infrastructure.Ef.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20250730190522_AddInit")]
    partial class AddInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IGamingTest.Core.Entities.Meteorite.GeoLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Geo>("Geo")
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Geos");
                });

            modelBuilder.Entity("IGamingTest.Core.Entities.Meteorite.MeteoriteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fall")
                        .HasColumnType("text");

                    b.Property<int?>("GeolocationId")
                        .HasColumnType("integer");

                    b.Property<double?>("Mass")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameType")
                        .HasColumnType("text");

                    b.Property<string>("RecClass")
                        .HasColumnType("text");

                    b.Property<string>("RecLat")
                        .HasColumnType("text");

                    b.Property<string>("RecLong")
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("Name");

                    b.HasIndex("RecClass");

                    b.HasIndex("Year");

                    b.ToTable("Meteorites");
                });

            modelBuilder.Entity("IGamingTest.Core.Entities.Meteorite.MeteoriteEntity", b =>
                {
                    b.HasOne("IGamingTest.Core.Entities.Meteorite.GeoLocationEntity", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId");

                    b.Navigation("Geolocation");
                });
#pragma warning restore 612, 618
        }
    }
}
